// This file has been autogenerated.
// Do not modify manually.
//
#pragma once

#include <anton/optional.hpp>
#include <glang_syntax/syntax.hpp>

namespace glang {
  [[nodiscard]] Syntax_Token const&
  get_variable_identifier(Syntax_Node const& node);
  [[nodiscard]] anton::Optional<Syntax_Token const&>
  get_variable_size(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_decl_procedure_identifier(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_decl_procedure_parameter_list(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_decl_procedure_declaration_list(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_decl_procedure_body(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_decl_main_declaration_list(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_decl_main_body(Syntax_Node const& node);
  [[nodiscard]] anton::Optional<Syntax_Token const&>
  get_procedure_parameter_T(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_procedure_parameter_identifier(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_expr_binary_lhs(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_expr_binary_operator(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_expr_binary_rhs(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_expr_identifier_value(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_expr_index_base(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_expr_index_index(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_expr_lt_integer_value(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_if_condition(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_if_then_branch(Syntax_Node const& node);
  [[nodiscard]] anton::Optional<Syntax_Node const&>
  get_stmt_if_else_branch(Syntax_Node const& node);
  [[nodiscard]] Syntax_Token const&
  get_stmt_call_identifier(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_call_arguments(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_while_condition(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_while_statements(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_repeat_statements(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const&
  get_stmt_repeat_condition(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_stmt_read_dst(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_stmt_write_src(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_stmt_assign_dst(Syntax_Node const& node);
  [[nodiscard]] Syntax_Node const& get_stmt_assign_src(Syntax_Node const& node);
} // namespace glang
